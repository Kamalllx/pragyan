"""
MANIM AI-GENERATED CODE - DYNAMICALLY CREATED
Generated: 2025-06-20T16:29:40.783925
Status: âš ï¸ NEEDS REVIEW
Quality Score: 27/100
Execution Successful: False
Video Generated: False

This code was generated by AI based on user requirements.
Compatible with Manim v0.19.0

To run this animation:
manim -ql filename.py SceneName
"""

from manim import *

class TrigonometryBasics(Scene):
    def construct(self):
        # Set a simple color scheme
        main_color = BLUE
        secondary_color = TEAL
        highlight_color = YELLOW
        text_color = WHITE

        # --- 1. Title Introduction ---
        title = Text("Introduction to Trigonometry", font_size=48, color=main_color)
        subtitle = Text("The study of triangles", font_size=36).next_to(title, DOWN, buff=0.5)

        self.play(Write(title))
        self.play(FadeIn(subtitle, shift=UP))
        self.wait(2)
        self.play(FadeOut(VGroup(title, subtitle)))
        self.wait(1)

        # --- 2. What is a Right-Angled Triangle? ---
        intro_text = Text(
            "Trigonometry helps us understand the relationship\nbetween angles and side lengths in triangles.",
            font_size=32,
            line_spacing=1.2
        ).to_edge(UP)
        self.play(Write(intro_text))
        self.wait(2)

        # Create a right-angled triangle
        triangle = Polygon(
            [0, 0, 0], [4, 0, 0], [4, 3, 0],
            color=main_color,
            stroke_width=6
        ).center().shift(DOWN * 0.5)
        
        # Mark the right angle
        right_angle_mark = Square(side_length=0.4, color=secondary_color, stroke_width=4).move_to(triangle.get_vertices()[1], aligned_edge=DR)

        self.play(Create(triangle))
        self.play(Create(right_angle_mark))
        self.wait(2)

        # --- 3. Labeling the Sides ---
        self.play(FadeOut(intro_text))

        # Introduce the angle theta
        angle = Angle(Line(triangle.get_vertices()[1], triangle.get_vertices()[0]),
                      Line(triangle.get_vertices()[0], triangle.get_vertices()[2]),
                      radius=0.7, color=highlight_color)
        theta_label = MathTex(r"\theta", color=highlight_color).move_to(
            angle.get_center() + RIGHT * 0.4 + UP * 0.1
        )

        self.play(Create(angle), Write(theta_label))
        self.wait(1)

        # Label the sides relative to theta
        hypotenuse_label = Text("Hypotenuse", font_size=32).next_to(Line(triangle.get_vertices()[0], triangle.get_vertices()[2]).get_center(), UP, buff=0.2).rotate(angle.get_value())
        opposite_label = Text("Opposite", font_size=32).next_to(Line(triangle.get_vertices()[1], triangle.get_vertices()[2]).get_center(), RIGHT, buff=0.2)
        adjacent_label = Text("Adjacent", font_size=32).next_to(Line(triangle.get_vertices()[0], triangle.get_vertices()[1]).get_center(), DOWN, buff=0.2)
        
        side_labels = VGroup(hypotenuse_label, opposite_label, adjacent_label)
        
        self.play(Write(hypotenuse_label))
        self.wait(1)
        self.play(Write(opposite_label))
        self.wait(1)
        self.play(Write(adjacent_label))
        self.wait(2)

        # Group the triangle and its labels
        triangle_group = VGroup(triangle, right_angle_mark, angle, theta_label, side_labels)
        self.play(triangle_group.animate.scale(0.7).to_edge(LEFT, buff=1))
        self.wait(1)

        # --- 4. The Trigonometric Ratios (SOH CAH TOA) ---
        ratios_title = Text("The Main Ratios", font_size=40).to_edge(UP).shift(RIGHT * 3)
        self.play(Write(ratios_title))

        # SOH CAH TOA Mnemonic
        soh_cah_toa = MathTex(
            r"\text{SOH}", r"\quad \text{CAH}", r"\quad \text{TOA}",
            font_size=48
        ).next_to(ratios_title, DOWN, buff=0.5)
        self.play(Write(soh_cah_toa))
        self.wait(1)

        # Sine
        sin_formula = MathTex(r"\sin(\theta) = \frac{\text{Opposite}}{\text{Hypotenuse}}", font_size=40).next_to(soh_cah_toa, DOWN, buff=0.7)
        self.play(Write(sin_formula))
        self.play(Indicate(soh_cah_toa[0]), Indicate(opposite_label), Indicate(hypotenuse_label))
        self.wait(1)

        # Cosine
        cos_formula = MathTex(r"\cos(\theta) = \frac{\text{Adjacent}}{\text{Hypotenuse}}", font_size=40).next_to(sin_formula, DOWN, buff=0.5)
        self.play(Write(cos_formula))
        self.play(Indicate(soh_cah_toa[1]), Indicate(adjacent_label), Indicate(hypotenuse_label))
        self.wait(1)

        # Tangent
        tan_formula = MathTex(r"\tan(\theta) = \frac{\text{Opposite}}{\text{Adjacent}}", font_size=40).next_to(cos_formula, DOWN, buff=0.5)
        self.play(Write(tan_formula))
        self.play(Indicate(soh_cah_toa[2]), Indicate(opposite_label), Indicate(adjacent_label))
        self.wait(2)

        formulas = VGroup(ratios_title, soh_cah_toa, sin_formula, cos_formula, tan_formula)
        self.play(FadeOut(triangle_group), FadeOut(formulas))
        self.wait(1)

        # --- 5. Example Calculation ---
        example_title = Text("Let's see an example", font_size=40).to_edge(UP)
        self.play(Write(example_title))

        # Create a 3-4-5 triangle on a coordinate system
        axes = Axes(
            x_range=[0, 6, 1],
            y_range=[0, 4, 1],
            x_length=6,
            y_length=4,
            axis_config={"include_tip": False}
        ).to_edge(DOWN, buff=1).to_edge(LEFT, buff=1)
        
        # FIXED: Pass vertices as separate arguments, not as a single list.
        triangle_ex = Polygon(axes.c2p(0,0), axes.c2p(4,0), axes.c2p(4,3), color=main_color, stroke_width=6)
        
        # Side length labels
        label_adj = MathTex("4").next_to(triangle_ex.get_bottom(), DOWN)
        label_opp = MathTex("3").next_to(triangle_ex.get_right(), RIGHT)
        label_hyp = MathTex("5").next_to(Line(triangle_ex.get_vertices()[0], triangle_ex.get_vertices()[2]).get_center(), UL, buff=0.1)

        # Angle theta
        angle_ex = Angle(Line(axes.c2p(4,0), axes.c2p(0,0)), Line(axes.c2p(0,0), axes.c2p(4,3)), radius=0.7, color=highlight_color)
        theta_ex_label = MathTex(r"\theta", color=highlight_color).move_to(angle_ex.get_center() + RIGHT*0.4)

        example_group = VGroup(axes, triangle_ex, label_adj, label_opp, label_hyp, angle_ex, theta_ex_label)
        self.play(Create(example_group))
        self.wait(2)

        # Step-by-step calculation
        calc_sin_1 = MathTex(r"\sin(\theta) = \frac{\text{Opposite}}{\text{Hypotenuse}}", font_size=40).to_edge(RIGHT, buff=1.5).shift(UP*1.5)
        self.play(Write(calc_sin_1))
        self.wait(1)
        
        calc_sin_2 = MathTex(r"\sin(\theta) = \frac{3}{5}", font_size=40).next_to(calc_sin_1, DOWN, buff=0.5)
        self.play(Indicate(label_opp), Indicate(label_hyp))
        self.play(Transform(calc_sin_1.copy(), calc_sin_2))
        self.wait(1)

        calc_sin_3 = MathTex(r"\sin(\theta) = 0.6", font_size=40).next_to(calc_sin_2, DOWN, buff=0.5)
        self.play(Transform(calc_sin_2.copy(), calc_sin_3))
        self.wait(2)

        calc_cos_1 = MathTex(r"\cos(\theta) = \frac{\text{Adjacent}}{\text{Hypotenuse}} = \frac{4}{5} = 0.8", font_size=40).next_to(calc_sin_3, DOWN, buff=0.7)
        self.play(Write(calc_cos_1))
        self.play(Indicate(label_adj), Indicate(label_hyp))
        self.wait(2)

        calc_tan_1 = MathTex(r"\tan(\theta) = \frac{\text{Opposite}}{\text{Adjacent}} = \frac{3}{4} = 0.75", font_size=40).next_to(calc_cos_1, DOWN, buff=0.7)
        self.play(Write(calc_tan_1))
        self.play(Indicate(label_opp), Indicate(label_adj))
        self.wait(3)

        # Clear the screen for summary
        calculations = VGroup(calc_sin_1, calc_sin_2, calc_sin_3, calc_cos_1, calc_tan_1)
        self.play(FadeOut(example_title), FadeOut(example_group), FadeOut(calculations))
        self.wait(1)

        # --- 6. Summary ---
        summary_title = Text("Key Takeaways", font_size=48, color=main_color).to_edge(UP)
        self.play(Write(summary_title))
        self.wait(1)

        # Point 1: Right-angled triangle
        point1_text = Text("1. Trigonometry is based on right-angled triangles.", font_size=32).shift(UP*1.5)
        
        # Point 2: SOH CAH TOA
        point2_text = Text("2. Remember the main ratios with SOH CAH TOA:", font_size=32).next_to(point1_text, DOWN, buff=0.7, aligned_edge=LEFT)
        summary_formulas = MathTex(
            r"\sin(\theta) = \frac{O}{H}", r"\quad \cos(\theta) = \frac{A}{H}", r"\quad \tan(\theta) = \frac{O}{A}",
            font_size=36
        ).next_to(point2_text, DOWN, buff=0.4)

        # Point 3: Application
        point3_text = Text("3. These ratios help find unknown sides or angles.", font_size=32).next_to(summary_formulas, DOWN, buff=0.7, aligned_edge=LEFT)

        summary_group = VGroup(point1_text, point2_text, summary_formulas, point3_text)
        
        self.play(Write(point1_text))
        self.wait(1.5)
        self.play(Write(point2_text))
        self.play(Write(summary_formulas))
        self.wait(2)
        self.play(Write(point3_text))
        self.wait(3)

        # --- 7. Conclusion ---
        self.play(FadeOut(summary_title), FadeOut(summary_group))
        
        end_message = Text("Happy Learning!", font_size=48, color=highlight_color)
        self.play(Write(end_message))
        self.wait(2)
