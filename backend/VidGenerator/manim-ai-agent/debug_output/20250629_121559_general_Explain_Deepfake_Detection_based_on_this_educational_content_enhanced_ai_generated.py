from manim import *

class DeepfakeDetectionScene(Scene):
    """
    An educational animation explaining the fundamentals of Deepfake Detection.
    This scene covers:
    1. What a Deepfake is.
    2. The basics of how they are created (GANs).
    3. Common artifacts used for detection.
    4. The role of detection models like CNNs.
    """
    def construct(self):
        # Set a consistent theme
        self.camera.background_color = "#1E1E1E"
        main_color = BLUE
        accent_color = YELLOW
        text_color = WHITE

        # --- 1. Title Introduction ---
        title = Text("Understanding Deepfake Detection", font_size=40, color=text_color)
        title.to_edge(UP)
        self.play(Write(title))
        self.wait(1)

        # --- 2. What is a Deepfake? ---
        intro_text = Text("Deepfakes are synthetic media generated by AI.", font_size=24).next_to(title, DOWN, buff=0.8)
        self.play(FadeIn(intro_text))
        self.wait(1)

        # Visual representation of real vs. fake
        real_face_box = Rectangle(width=3, height=3, color=GREEN, stroke_width=2)
        real_label = Text("Real Face", font_size=24).next_to(real_face_box, DOWN)
        real_group = VGroup(real_face_box, real_label).shift(LEFT * 3.5)

        fake_face_box = Rectangle(width=3, height=3, color=RED, stroke_width=2)
        fake_label = Text("Fake Face", font_size=24).next_to(fake_face_box, DOWN)
        fake_group = VGroup(fake_face_box, fake_label).shift(RIGHT * 3.5)

        self.play(Create(real_group), Create(fake_group))
        self.wait(1)

        arrow_creation = Arrow(real_face_box.get_right(), fake_face_box.get_left(), buff=0.2, color=accent_color)
        creation_label = Text("AI Manipulation", font_size=24).next_to(arrow_creation, UP, buff=0.2)
        self.play(Create(arrow_creation), Write(creation_label))
        self.wait(2)

        self.play(FadeOut(intro_text), FadeOut(real_group), FadeOut(fake_group), FadeOut(arrow_creation), FadeOut(creation_label))
        self.wait(1)

        # --- 3. How are they created? (Simplified GAN) ---
        gan_title = Text("Core Idea: Generative Adversarial Networks (GANs)", font_size=28).next_to(title, DOWN, buff=0.8)
        self.play(Write(gan_title))
        self.wait(1)

        # Generator
        generator_box = Rectangle(width=3, height=2, color=main_color)
        generator_label = Text("Generator", font_size=24).move_to(generator_box.get_center())
        generator = VGroup(generator_box, generator_label).shift(LEFT * 4)

        # Discriminator
        discriminator_box = Rectangle(width=3, height=2, color=accent_color)
        discriminator_label = Text("Discriminator", font_size=24).move_to(discriminator_box.get_center())
        discriminator = VGroup(discriminator_box, discriminator_label).shift(RIGHT * 4)

        self.play(Create(generator), Create(discriminator))
        self.wait(1)

        # Data flow
        noise = Text("Random Noise", font_size=20).next_to(generator, LEFT, buff=1.0)
        fake_image = Text("Fake Image", font_size=20).next_to(generator, RIGHT, buff=1.0)
        real_image = Text("Real Image", font_size=20).next_to(discriminator, UP, buff=1.0).shift(LEFT*0.5)

        arrow1 = Arrow(noise.get_right(), generator.get_left(), buff=0.1)
        arrow2 = Arrow(generator.get_right(), fake_image.get_left(), buff=0.1)
        arrow3 = Arrow(fake_image.get_right(), discriminator.get_left(), buff=0.1, path_arc=-0.5 * PI)
        arrow4 = Arrow(real_image.get_bottom(), discriminator.get_top(), buff=0.1)

        self.play(Write(noise), Create(arrow1))
        self.play(Transform(arrow1, arrow2), Write(fake_image))
        self.wait(1)
        self.play(Write(real_image), Create(arrow4))
        self.play(Create(arrow3))
        self.wait(1)

        # Feedback loop
        feedback_arrow = Arrow(discriminator.get_left(), generator.get_right(), buff=0.2, path_arc=0.5 * PI, color=RED)
        feedback_label = Text("Improve!", font_size=20, color=RED).next_to(feedback_arrow, UP, buff=0.1)
        self.play(Create(feedback_arrow), Write(feedback_label))
        self.wait(2)

        gan_group = VGroup(gan_title, generator, discriminator, noise, fake_image, real_image, arrow1, arrow3, arrow4, feedback_arrow, feedback_label)
        self.play(FadeOut(gan_group))
        self.wait(1)

        # --- 4. Detection: Finding Artifacts ---
        detection_title = Text("Detection Strategy: Find the Artifacts", font_size=28).next_to(title, DOWN, buff=0.8)
        self.play(Write(detection_title))
        self.wait(1)

        fake_face_display = Rectangle(width=4, height=4, color=RED, stroke_width=3).move_to(ORIGIN)
        self.play(Create(fake_face_display))
        self.wait(1)

        # List of artifacts
        artifact1 = Text("1. Unnatural Blinking", font_size=24).to_edge(LEFT).shift(UP * 1.5)
        artifact2 = Text("2. Inconsistent Lighting", font_size=24).next_to(artifact1, DOWN, buff=0.5, aligned_edge=LEFT)
        artifact3 = Text("3. Blurry Edges / Hair", font_size=24).next_to(artifact2, DOWN, buff=0.5, aligned_edge=LEFT)
        artifact4 = Text("4. Digital Fingerprints", font_size=24).next_to(artifact3, DOWN, buff=0.5, aligned_edge=LEFT)
        artifacts_list = VGroup(artifact1, artifact2, artifact3, artifact4)

        self.play(Write(artifacts_list))
        self.wait(1)

        # Animate indication of artifacts
        blinking_indicator = Circle(radius=0.3, color=accent_color).move_to(fake_face_display.get_center() + UP * 0.8)
        self.play(Indicate(artifact1), Create(blinking_indicator))
        self.play(FadeOut(blinking_indicator))

        lighting_indicator = Line(
            fake_face_display.get_corner(DL) + RIGHT*0.5,
            fake_face_display.get_corner(UL) + RIGHT*0.5,
            color=accent_color, stroke_width=6
        )
        self.play(Indicate(artifact2), Create(lighting_indicator))
        self.play(FadeOut(lighting_indicator))

        edge_indicator = DashedVMobject(
            Line(fake_face_display.get_corner(UR), fake_face_display.get_corner(DR)),
            num_dashes=10, color=accent_color
        )
        self.play(Indicate(artifact3), Create(edge_indicator))
        self.play(FadeOut(edge_indicator))
        self.wait(2)

        self.play(FadeOut(detection_title), FadeOut(fake_face_display), FadeOut(artifacts_list))
        self.wait(1)

        # --- 5. Detection Models (CNN) ---
        model_title = Text("Detection Models: Classifiers", font_size=28).next_to(title, DOWN, buff=0.8)
        self.play(Write(model_title))

        # CNN diagram
        input_img = Rectangle(width=2, height=2, color=WHITE).to_edge(LEFT, buff=1.5)
        input_label = Text("Input Image", font_size=20).next_to(input_img, DOWN)

        cnn_layer1 = Rectangle(width=1.5, height=1.5, color=main_color).next_to(input_img, RIGHT, buff=1.0)
        cnn_layer2 = Rectangle(width=1.0, height=1.0, color=main_color).next_to(cnn_layer1, RIGHT, buff=0.2)
        cnn_layer3 = Rectangle(width=0.5, height=0.5, color=main_color).next_to(cnn_layer2, RIGHT, buff=0.2)
        cnn_group = VGroup(cnn_layer1, cnn_layer2, cnn_layer3)
        cnn_label = Text("CNN Model", font_size=20).next_to(cnn_group, DOWN)

        output_text = Text("Real / Fake?", font_size=24).to_edge(RIGHT, buff=1.5)
        output_label = Text("Classification", font_size=20).next_to(output_text, DOWN)

        arrow_to_cnn = Arrow(input_img.get_right(), cnn_layer1.get_left(), buff=0.1)
        arrow_to_output = Arrow(cnn_group.get_right(), output_text.get_left(), buff=0.1)

        self.play(
            Create(input_img), Write(input_label),
            Create(arrow_to_cnn)
        )
        self.play(
            Create(cnn_group), Write(cnn_label),
            Create(arrow_to_output)
        )
        self.play(
            Write(output_text), Write(output_label)
        )
        self.wait(2)

        # --- 6. Mathematical Intuition ---
        math_formula = MathTex(
            r"P(\text{Fake} | x) = \sigma(W \cdot \phi(x) + b)",
            font_size=36
        ).next_to(cnn_group, DOWN, buff=1.5)
        
        phi_explanation = Text("Extract Features (artifacts)", font_size=20).next_to(math_formula, DOWN, buff=0.5, aligned_edge=LEFT)
        sigma_explanation = Text("Output Probability (0 to 1)", font_size=20).next_to(phi_explanation, DOWN, buff=0.2, aligned_edge=LEFT)

        self.play(Write(math_formula))
        self.wait(1)
        self.play(Write(phi_explanation))
        self.play(Write(sigma_explanation))
        self.wait(3)

        # --- 7. Summary ---
        self.play(
            FadeOut(model_title), FadeOut(input_img), FadeOut(input_label),
            FadeOut(cnn_group), FadeOut(cnn_label), FadeOut(output_text),
            FadeOut(output_label), FadeOut(arrow_to_cnn), FadeOut(arrow_to_output),
            FadeOut(math_formula), FadeOut(phi_explanation), FadeOut(sigma_explanation)
        )
        self.wait(1)

        summary_title = Text("Key Takeaways", font_size=32).to_edge(UP).shift(DOWN*1.5)
        summary_points = VGroup(
            Text("1. Deepfakes are AI-generated media, often using GANs.", font_size=24),
            Text("2. Detection focuses on finding subtle inconsistencies (artifacts).", font_size=24),
            Text("3. CNNs are trained to classify images as Real or Fake.", font_size=24),
            Text("4. It's an ongoing race between generation and detection.", font_size=24)
        ).arrange(DOWN, buff=0.5, aligned_edge=LEFT).next_to(summary_title, DOWN, buff=0.8)

        self.play(Write(summary_title))
        self.play(FadeIn(summary_points, shift=UP))
        self.wait(4)

        self.play(FadeOut(title), FadeOut(summary_title), FadeOut(summary_points))
        self.wait(2)